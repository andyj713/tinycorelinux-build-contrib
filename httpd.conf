#
# This is the main Apache HTTP server configuration file.  It contains the
# configuration directives that give the server its instructions.
# See <URL:http://httpd.apache.org/docs/2.4/> for detailed information.
# In particular, see 
# <URL:http://httpd.apache.org/docs/2.4/mod/directives.html>
# for a discussion of each configuration directive.
#
# Do NOT simply read the instructions in here without understanding
# what they do.  They're here only as hints or reminders.  If you are unsure
# consult the online docs. You have been warned.  
#
# Configuration and logfile names: If the filenames you specify for many
# of the server's control files begin with "/" (or "drive:/" for Win32), the
# server will use that explicit path.  If the filenames do *not* begin
# with "/", the value of ServerRoot is prepended -- so "logs/access_log"
# with ServerRoot set to "/usr/local/apache2" will be interpreted by the
# server as "/usr/local/apache2/logs/access_log", whereas "/logs/access_log" 
# will be interpreted as '/logs/access_log'.

#
# ServerRoot: The top of the directory tree under which the server's
# configuration, error, and log files are kept.
#
# Do not add a slash at the end of the directory path.  If you point
# ServerRoot at a non-local disk, be sure to specify a local disk on the
# Mutex directive, if file-based mutexes are used.  If you wish to share the
# same ServerRoot for multiple httpd daemons, you will need to change at
# least PidFile.
#
ServerRoot "/usr/local/apache2"

#
# Mutex: Allows you to set the mutex mechanism and mutex file directory
# for individual mutexes, or change the global defaults
#
# Uncomment and change the directory if mutexes are file-based and the default
# mutex file directory is not on a local disk or is not appropriate for some
# other reason.
#
# Mutex default:/var/log/httpd

#
# Listen: Allows you to bind Apache to specific IP addresses and/or
# ports, instead of the default. See also the <VirtualHost>
# directive.
#
# Change this to Listen on specific IP addresses as shown below to 
# prevent Apache from glomming onto all bound IP addresses.
#
#Listen 12.34.56.78:80
Listen 0.0.0.0:80

#
# Dynamic Shared Object (DSO) Support
#
# To be able to use the functionality of a module which was built as a DSO you
# have to place corresponding `LoadModule' lines at this location so the
# directives contained in it are actually available _before_ they are used.
# Statically compiled modules (those listed by `httpd -l') do not need
# to be loaded here.
#
# Example:
# LoadModule foo_module modules/mod_foo.so
#
#------------------------------------------------------------------------------
#
# The directives provided by mod_access_compat are used in <Directory>, <Files>,
# and <Location> sections as well as .htaccess files to control access to
# particular parts of the server. Access can be controlled based on the client
# hostname, IP address, or other characteristics of the client request, as
# captured in environment variables. The Allow and Deny directives are used to
# specify which clients are or are not allowed access to the server, while the
# Order directive sets the default access state, and configures how the Allow and
# Deny directives interact with each other.
# 
# Both host-based access restrictions and password-based authentication may be
# implemented simultaneously. In that case, the Satisfy directive is used to
# determine how the two sets of restrictions interact.
# Note
# 
# The directives provided by mod_access_compat have been deprecated by
# mod_authz_host. Mixing old directives like Order, Allow or Deny with new ones
# like Require is technically possible but discouraged. This module was created to
# support configurations containing only old directives to facilitate the 2.4
# upgrade. Please check the upgrading guide for more information.
# 
# In general, access restriction directives apply to all access methods (GET, PUT,
# POST, etc). This is the desired behavior in most cases. However, it is possible
# to restrict some methods, while leaving other methods unrestricted, by enclosing
# the directives in a <Limit> section.
# 
LoadModule access_compat_module modules/mod_access_compat.so
#
#------------------------------------------------------------------------------
#
# actions_module has two directives. The Action directive lets you run CGI scripts
# whenever a file of a certain MIME content type is requested. The Script
# directive lets you run CGI scripts whenever a particular method is used in a
# request. This makes it much easier to execute scripts that process files.
# 
#LoadModule actions_module modules/mod_actions.so
#
#------------------------------------------------------------------------------
#
# The directives contained in alias_module allow for manipulation and control of
# URLs as requests arrive at the server. The Alias and ScriptAlias directives are
# used to map between URLs and filesystem paths. This allows for content which is
# not directly under the DocumentRoot served as part of the web document tree. The
# ScriptAlias directive has the additional effect of marking the target directory
# as containing only CGI scripts.
# 
# The Redirect directives are used to instruct clients to make a new request with
# a different URL. They are often used when a resource has moved to a new
# location.
# 
# When the Alias, ScriptAlias and Redirect directives are used within a <Location>
# or <LocationMatch> section, expression syntax can be used to manipulate the
# destination path or URL.
# 
# mod_alias is designed to handle simple URL manipulation tasks. For more
# complicated tasks such as manipulating the query string, use the tools provided
# by mod_rewrite.
# 
LoadModule alias_module modules/mod_alias.so
#
#------------------------------------------------------------------------------
#
# allowmethods_module makes it easy to restrict what HTTP methods can be used on a
# server.
#
#LoadModule allowmethods_module modules/mod_allowmethods.so
#
#------------------------------------------------------------------------------
#
# asis_module provides the handler send-as-is which causes Apache HTTP Server to
# send the document without adding most of the usual HTTP headers.
# 
# This can be used to send any kind of data from the server, including redirects
# and other special HTTP responses, without requiring a cgi-script or an nph
# script.
# 
# For historical reasons, this module will also process any file with the mime
# type httpd/send-as-is.
# 
#LoadModule asis_module modules/mod_asis.so
#
#------------------------------------------------------------------------------
#
# auth_basic_module allows the use of HTTP Basic Authentication to restrict access by
# looking up users in the given providers. HTTP Digest Authentication is provided
# by mod_auth_digest. This module should usually be combined with at least one
# authentication module such as mod_authn_file and one authorization module such
# as mod_authz_user.
# 
LoadModule auth_basic_module modules/mod_auth_basic.so
#
#------------------------------------------------------------------------------
#
# auth_digest_module implements HTTP Digest Authentication (RFC2617), and provides an
# alternative to mod_auth_basic where the password is not transmitted as cleartext.
# However, this does not lead to a significant security advantage over basic authentication.
# On the other hand, the password storage on the server is much less secure with
# digest authentication than with basic authentication. Therefore, using basic
# auth and encrypting the whole connection using mod_ssl is a much better
# alternative.
# 
LoadModule auth_digest_module modules/mod_auth_digest.so
#
#------------------------------------------------------------------------------
#
# auth_form_module allows the use of an HTML login form to restrict access by looking
# up users in the given providers. HTML forms require significantly more
# configuration than the alternatives, however an HTML login form can provide a
# much friendlier experience for end users.
# 
# Form authentication depends on the mod_session modules, and these modules make
# use of HTTP cookies, and as such can fall victim to Cross Site Scripting
# attacks, or expose potentially private information to clients. Please ensure
# that the relevant risks have been taken into account before enabling the session
# functionality on your server.
# 
# HTTP basic authentication is provided by mod_auth_basic, and HTTP digest
# authentication is provided by mod_auth_digest. This module should be combined
# with at least one authentication module such as mod_authn_file and one
# authorization module such as mod_authz_user.
# 
# Once the user has been successfully authenticated, the user's login details will
# be stored in a session provided by mod_session. 
# 
LoadModule auth_form_module modules/mod_auth_form.so
#
#------------------------------------------------------------------------------
#
# authn_anon_module provides authentication front-ends such as mod_auth_basic to
# authenticate users similar to anonymous-ftp sites, i.e. have a 'magic' user id
# 'anonymous' and the email address as a password. These email addresses can be
# logged.
# 
# Combined with other (database) access control methods, this allows for effective
# user tracking and customization according to a user profile while still keeping
# the site open for 'unregistered' users. One advantage of using Auth-based user
# tracking is that, unlike magic-cookies and funny URL pre/postfixes, it is
# completely browser independent and it allows users to share URLs.
# 
# When using mod_auth_basic, this module is invoked via the AuthBasicProvider
# directive with the anon value.
# 
#LoadModule authn_anon_module modules/mod_authn_anon.so
#
#------------------------------------------------------------------------------
#
# authn_core_module provides core authentication capabilities to allow or deny
# access to portions of the web site. mod_authn_core provides directives that are
# common to all authentication providers.
# 
LoadModule authn_core_module modules/mod_authn_core.so
#
#------------------------------------------------------------------------------
#
# authn_dbd_module provides authentication front-ends such as mod_auth_digest
# and mod_auth_basic to authenticate users by looking up users in SQL tables.
# Similar functionality is provided by, for example, mod_authn_file.
# 
# This module relies on mod_dbd to specify the backend database driver and
# connection parameters, and manage the database connections.
# 
# When using mod_auth_basic or mod_auth_digest, this module is invoked via the
# AuthBasicProvider or AuthDigestProvider with the dbd value.
# 
#LoadModule authn_dbd_module modules/mod_authn_dbd.so
#
#------------------------------------------------------------------------------
#
# authn_core_module provides authentication front-ends such as mod_auth_digest
# and mod_auth_basic to authenticate users by looking up users in dbm password
# files. Similar functionality is provided by mod_authn_file.
# 
# When using mod_auth_basic or mod_auth_digest, this module is invoked via the
# AuthBasicProvider or AuthDigestProvider with the dbm value.
# 
#LoadModule authn_dbm_module modules/mod_authn_dbm.so
#
#------------------------------------------------------------------------------
#
# provides authentication front-ends such as mod_auth_digest and mod_auth_basic
# to authenticate users by looking up users in plain text password files. Similar
# functionality is provided by mod_authn_dbm.
# 
# When using mod_auth_basic or mod_auth_digest, this module is invoked via the
# AuthBasicProvider or AuthDigestProvider with the file value.
# 
#LoadModule authn_file_module modules/mod_authn_file.so
#
#------------------------------------------------------------------------------
#
# authn_socache_module maintains a cache of authentication credentials, so that
# a new backend lookup is not required for every authenticated request.
#
# Some users of more heavyweight authentication such as SQL database lookups
# (mod_authn_dbd) have reported it putting an unacceptable load on their
# authentication provider. A typical case in point is where an HTML page contains
# hundreds of objects (images, scripts, stylesheets, media, etc), and a request to
# the page generates hundreds of effectively-immediate requests for authenticated
# additional contents.
# 
# mod_authn_socache provides a solution to this problem by maintaining a cache of
# authentication credentials.
#
LoadModule authn_socache_module modules/mod_authn_socache.so
#
#------------------------------------------------------------------------------
# 
# authnz_fcgi_module allows FastCGI authorizer applications to authenticate
# users and authorize access to resources. It supports generic FastCGI authorizers
# which participate in a single phase for authentication and authorization as well
# as Apache httpd-specific authenticators and authorizors which participate in one
# or both phases.
# 
# FastCGI authorizers can authenticate using user id and password, such as for
# Basic authentication, or can authenticate using arbitrary mechanisms.
# 
#LoadModule authnz_fcgi_module modules/mod_authnz_fcgi.so
#
#------------------------------------------------------------------------------
# 
# authnz_ldap_module allows authentication front-ends such as mod_auth_basic to
# authenticate users through an ldap directory.
# 
# mod_authnz_ldap supports complex authorization policies implemented by representing
# the policy with LDAP filters, extensive caching of LDAP operations via mod_ldap,
# and support for LDAP over SSL.
# 
# When using mod_auth_basic, this module is invoked via the AuthBasicProvider
# directive with the ldap value.
#
#LoadModule authnz_ldap_module modules/mod_authnz_ldap.so
#
#------------------------------------------------------------------------------
# 
# authz_core_module provides core authorization capabilities so that
# authenticated users can be allowed or denied access to portions of the web site.
# mod_authz_core provides the functionality to register various authorization
# providers. It is usually used in conjunction with an authentication provider
# module such as mod_authn_file and an authorization module such as
# mod_authz_user. It also allows for advanced logic to be applied to the
# authorization processing.
# 
LoadModule authz_core_module modules/mod_authz_core.so
#
#------------------------------------------------------------------------------
# 
# authz_dbd_module provides authorization capabilities so that authenticated
# users can be allowed or denied access to portions of the web site by group
# membership. Similar functionality is provided by mod_authz_groupfile and
# mod_authz_dbm, with the exception that this module queries a SQL database to
# determine whether a user is a member of a group.
# 
# This module can also provide database-backed user login/logout capabilities.
# These are likely to be of most value when used in conjunction with
# mod_authn_dbd.
# 
# This module relies on mod_dbd to specify the backend database driver and
# connection parameters, and manage the database connections.
# 
#LoadModule authz_dbd_module modules/mod_authz_dbd.so
#
#------------------------------------------------------------------------------
# 
# authz_dbm_module provides authorization capabilities so that authenticated
# users can be allowed or denied access to portions of the web site by group
# membership. Similar functionality is provided by mod_authz_groupfile.
# 
#LoadModule authz_dbm_module modules/mod_authz_dbm.so
#
#------------------------------------------------------------------------------
# 
# authz_groupfile_module provides authorization capabilities so that
# authenticated users can be allowed or denied access to portions of the web site
# by group membership. Similar functionality is provided by mod_authz_dbm.
# 
#LoadModule authz_groupfile_module modules/mod_authz_groupfile.so
#
#------------------------------------------------------------------------------
# 
# The authorization providers implemented by mod_authz_host are registered using
# the Require directive. The directive can be referenced within a <Directory>,
# <Files>, or <Location> section as well as .htaccess files to control access to
# particular parts of the server. Access can be controlled based on the client
# hostname or IP address.
# 
# In general, access restriction directives apply to all access methods (GET, PUT,
# POST, etc). This is the desired behavior in most cases. However, it is possible
# to restrict some methods, while leaving other methods unrestricted, by enclosing
# the directives in a <Limit> section.
# 
LoadModule authz_host_module modules/mod_authz_host.so
#
#------------------------------------------------------------------------------
# 
# authz_owner_module authorizes access to files by comparing the userid used for
# HTTP authentication (the web userid) with the file-system owner or group of the
# requested file. The supplied username and password must be already properly
# verified by an authentication module, such as mod_auth_basic or mod_auth_digest.
# mod_authz_owner recognizes two arguments for the Require directive, file-owner
# and file-group.
# 
#LoadModule authz_owner_module modules/mod_authz_owner.so
#
#------------------------------------------------------------------------------
# 
# authz_user_module provides authorization capabilities so that authenticated
# users can be allowed or denied access to portions of the web site.
# mod_authz_user grants access if the authenticated user is listed in a Require
# user directive. Alternatively Require valid-user can be used to grant access to
# all successfully authenticated users.
# 
LoadModule authz_user_module modules/mod_authz_user.so
#
#------------------------------------------------------------------------------
# 
# The index of a directory can come from one of two sources:
# 
# 1. A file located in that directory, typically called index.html. The
# DirectoryIndex directive sets the name of the file or files to be used. This is
# controlled by mod_dir.
# 2. Otherwise, a listing generated by the server. The other directives control
# the format of this listing. The AddIcon, AddIconByEncoding and AddIconByType are
# used to set a list of icons to display for various file types; for each file
# listed, the first icon listed that matches the file is displayed. These are
# controlled by mod_autoindex.
# 
# The two functions are separated so that you can completely remove (or replace)
# automatic index generation should you want to.
# 
# Automatic index generation is enabled with using Options +Indexes. See the
# Options directive for more details.
# 
# If the FancyIndexing option is given with the IndexOptions directive, the column
# headers are links that control the order of the display. If you select a header
# link, the listing will be regenerated, sorted by the values in that column.
# Selecting the same header repeatedly toggles between ascending and descending
# order. These column header links are suppressed with the IndexOptions
# directive's SuppressColumnSorting option.
# 
# Note that when the display is sorted by "Size", it's the actual size of the
# files that's used, not the displayed value - so a 1010-byte file will always be
# displayed before a 1011-byte file (if in ascending order) even though they both
# are shown as "1K".
# 
LoadModule autoindex_module modules/mod_autoindex.so
#
#------------------------------------------------------------------------------
# 
#LoadModule bucketeer_module modules/mod_bucketeer.so
#
#------------------------------------------------------------------------------
# 
# buffer_module provides the ability to buffer the input and output filter
# stacks.
# 
# Under certain circumstances, content generators might create content in small
# chunks. In order to promote memory reuse, in memory chunks are always 8k in
# size, regardless of the size of the chunk itself. When many small chunks are
# generated by a request, this can create a large memory footprint while the
# request is being processed, and an unnecessarily large amount of data on the
# wire. The addition of a buffer collapses the response into the fewest chunks
# possible.
# 
# When httpd is used in front of an expensive content generator, buffering the
# response may allow the backend to complete processing and release resources
# sooner, depending on how the backend is designed.
# 
# The buffer filter may be added to either the input or the output filter stacks,
# as appropriate, using the SetInputFilter, SetOutputFilter, AddOutputFilter or
# AddOutputFilterByType directives.
# 
#LoadModule buffer_module modules/mod_buffer.so
#
#------------------------------------------------------------------------------
# 
# cache_module should be used with care, as when the CacheQuickHandler directive
# is in its default value of on, the Allow and Deny directives will be
# circumvented. You should not enable quick handler caching for any content to
# which you wish to limit access by client host name, address or environment
# variable.
# 
# mod_cache implements an RFC 2616 compliant HTTP content caching filter, with
# support for the caching of content negotiated responses containing the Vary
# header.
# 
LoadModule cache_module modules/mod_cache.so
#
#------------------------------------------------------------------------------
# 
# mod_cache_disk implements a disk based storage manager for mod_cache.
# 
# The headers and bodies of cached responses are stored separately on disk, in a
# directory structure derived from the md5 hash of the cached URL.
# 
# Multiple content negotiated responses can be stored concurrently, however the
# caching of partial content is not yet supported by this module.
# 
# Atomic cache updates to both header and body files are achieved without the need
# for locking by storing the device and inode numbers of the body file within the
# header file. This has the side effect that cache entries manually moved into the
# cache will be ignored.
# 
# The htcacheclean tool is provided to list cached URLs, remove cached URLs, or to
# maintain the size of the disk cache within size and/or inode limits. The tool
# can be run on demand, or can be daemonized to offer continuous monitoring of
# directory sizes.
# 
#LoadModule cache_disk_module modules/mod_cache_disk.so
#
#------------------------------------------------------------------------------
# 
# mod_cache_socache implements a shared object cache (socache) based storage
# manager for mod_cache.
# 
# The headers and bodies of cached responses are combined, and stored underneath a
# single key in the shared object cache. A number of implementations of shared
# object caches are available to choose from.
# 
# Multiple content negotiated responses can be stored concurrently, however the
# caching of partial content is not yet supported by this module.
# 
LoadModule cache_socache_module modules/mod_cache_socache.so
#
#------------------------------------------------------------------------------
# 
#LoadModule case_filter_module modules/mod_case_filter.so
#
#------------------------------------------------------------------------------
# 
#LoadModule case_filter_in_module modules/mod_case_filter_in.so
#
#------------------------------------------------------------------------------
# 
# Emulate the CERN HTTPD Meta file semantics. Meta files are HTTP headers that
# can be output in addition to the normal range of headers for each file accessed.
# They appear rather like the Apache .asis files, and are able to provide a crude
# way of influencing the Expires: header, as well as providing other curiosities.
# There are many ways to manage meta information, this one was chosen because
# there is already a large number of CERN users who can exploit this module.
# 
# More information on the CERN metafile semantics is available.
# 
#LoadModule cern_meta_module modules/mod_cern_meta.so
#
#------------------------------------------------------------------------------
# 
# Any file that has the handler cgi-script will be treated as a CGI script, and
# run by the server, with its output being returned to the client. Files acquire
# this handler either by having a name containing an extension defined by the
# AddHandler directive, or by being in a ScriptAlias directory.
# 
# For an introduction to using CGI scripts with Apache, see our tutorial on
# Dynamic Content With CGI.
# 
# When using a multi-threaded MPM under unix, the module mod_cgid should be used
# in place of this module. At the user level, the two modules are essentially
# identical.
# 
# For backward-compatibility, the cgi-script handler will also be activated for
# any file with the mime-type application/x-httpd-cgi. The use of the magic
# mime-type is deprecated.
# 
#LoadModule cgi_module modules/mod_cgi.so
#
#------------------------------------------------------------------------------
# 
# Except for the optimizations and the additional ScriptSock directive noted
# below, mod_cgid behaves similarly to mod_cgi. See the mod_cgi summary for
# additional details about Apache and CGI.
# 
# On certain unix operating systems, forking a process from a multi-threaded
# server is a very expensive operation because the new process will replicate all
# the threads of the parent process. In order to avoid incurring this expense on
# each CGI invocation, mod_cgid creates an external daemon that is responsible for
# forking child processes to run CGI scripts. The main server communicates with
# this daemon using a unix domain socket.
# 
# This module is used by default instead of mod_cgi whenever a multi-threaded MPM
# is selected during the compilation process. At the user level, this module is
# identical in configuration and operation to mod_cgi. The only exception is the
# additional directive ScriptSock which gives the name of the socket to use for
# communication with the cgi daemon.
# 
#LoadModule cgid_module modules/mod_cgid.so
#
#------------------------------------------------------------------------------
# 
# mod_charset_lite allows the server to change the character set of responses
# before sending them to the client. In an EBCDIC environment, Apache always
# translates HTTP protocol content (e.g. response headers) from the code page of
# the Apache process locale to ISO-8859-1, but not the body of responses. In any
# environment, mod_charset_lite can be used to specify that response bodies should
# be translated. For example, if files are stored in EBCDIC, then mod_charset_lite
# can translate them to ISO-8859-1 before sending them to the client.
# 
# This module provides a small subset of configuration mechanisms implemented by
# Russian Apache and its associated mod_charset.
# 
#LoadModule charset_lite_module modules/mod_charset_lite.so
#
#------------------------------------------------------------------------------
# 
# This module provides the ability to convert a response into an RFC2397 data URL.
# 
# Data URLs can be embedded inline within web pages using something like the
# mod_include module, to remove the need for clients to make separate connections
# to fetch what may potentially be many small images. Data URLs may also be
# included into pages generated by scripting languages such as PHP.
# 
#LoadModule data_module modules/mod_data.so
#
#------------------------------------------------------------------------------
# 
# dav_module provides class 1 and class 2 WebDAV ('Web-based Distributed Authoring
# and Versioning') functionality for Apache. This extension to the HTTP protocol
# allows creating, moving, copying, and deleting resources and collections on a
# remote web server.
# 
#LoadModule dav_module modules/mod_dav.so
#
#------------------------------------------------------------------------------
# 
# dav_fs_module This module requires the service of mod_dav. It acts as a support
# module for mod_dav and provides access to resources located in the server's file
# system. The formal name of this provider is filesystem. mod_dav backend
# providers will be invoked by using the Dav directive:
# 
# Since filesystem is the default provider for mod_dav, you may simply use the
# value On instead.
# 
#LoadModule dav_fs_module modules/mod_dav_fs.so
#
#------------------------------------------------------------------------------
# 
# dav_lock_module implements a generic locking API which can be used by any
# backend provider of mod_dav. It requires at least the service of mod_dav. But
# without a backend provider which makes use of it, it's useless and should not be
# loaded into the server. A sample backend module which actually utilizes
# mod_dav_lock is mod_dav_svn, the subversion provider module.
# 
# Note that mod_dav_fs does not need this generic locking module, because it uses
# its own more specialized version.
# 
# In order to make mod_dav_lock functional, you just have to specify the location
# of the lock database using the DavGenericLockDB directive described below.
# 
#LoadModule dav_lock_module modules/mod_dav_lock.so
#
#------------------------------------------------------------------------------
# 
# mod_dbd manages SQL database connections using APR. It provides database
# connections on request to modules requiring SQL database functions, and takes
# care of managing databases with optimal efficiency and scalability for both
# threaded and non-threaded MPMs. For details, see the APR website and this
# overview of the Apache DBD Framework by its original developer. 
# 
#LoadModule dbd_module modules/mod_dbd.so
#
#------------------------------------------------------------------------------
# 
# The mod_deflate module provides the DEFLATE output filter that allows output
# from your server to be compressed before being sent to the client over the
# network.
# 
LoadModule deflate_module modules/mod_deflate.so
#
#------------------------------------------------------------------------------
# 
# dialup_module sends static content at a bandwidth rate limit, defined by the
# various old modem standards. So, you can browse your site with a 56k V.92 modem,
# by adding something like this:
# 
# <Location "/mysite">
#     ModemStandard "V.92"
# </Location>
# 
# Previously to do bandwidth rate limiting modules would have to block an entire
# thread, for each client, and insert sleeps to slow the bandwidth down. Using the
# new suspend feature, a handler can get callback N milliseconds in the future,
# and it will be invoked by the Event MPM on a different thread, once the timer
# hits. From there the handler can continue to send data to the client.
# 
#LoadModule dialup_module modules/mod_dialup.so
#
#------------------------------------------------------------------------------
# 
# The index of a directory can come from one of two sources:
# 
# 1. A file written by the user, typically called index.html. The DirectoryIndex
# directive sets the name of this file. This is controlled by mod_dir.
# 2. Otherwise, a listing generated by the server. This is provided by
# mod_autoindex.
# 
# The two functions are separated so that you can completely remove (or replace)
# automatic index generation should you want to.
# 
# A "trailing slash" redirect is issued when the server receives a request for a
# URL http://servername/foo/dirname where dirname is a directory. Directories
# require a trailing slash, so mod_dir issues a redirect to
# http://servername/foo/dirname/.
# 
LoadModule dir_module modules/mod_dir.so
#
#------------------------------------------------------------------------------
# 
# mod_dumpio allows for the logging of all input received by Apache and/or all
# output sent by Apache to be logged (dumped) to the error.log file.
# 
# The data logging is done right after SSL decoding (for input) and right before
# SSL encoding (for output). As can be expected, this can produce extreme volumes
# of data, and should only be used when debugging problems.
# 
LoadModule dumpio_module modules/mod_dumpio.so
#
#------------------------------------------------------------------------------
# 
# echo_module provides an example protocol module to illustrate the concept. It
# provides a simple echo server. Telnet to it and type stuff, and it will echo it.
# 
#LoadModule echo_module modules/mod_echo.so
#
#------------------------------------------------------------------------------
# 
# env_module allows for control of internal environment variables that are used by
# various Apache HTTP Server modules. These variables are also provided to CGI
# scripts as native system environment variables, and available for use in SSI
# pages. Environment variables may be passed from the shell which invoked the
# httpd process. Alternatively, environment variables may be set or unset within
# the configuration process.
# 
LoadModule env_module modules/mod_env.so
#
#------------------------------------------------------------------------------
# 
# The files in the modules/examples directory under the Apache distribution
# directory tree are provided as an example to those that wish to write modules
# that use the Apache API.
# 
# The main file is mod_example_hooks.c, which illustrates all the different
# callback mechanisms and call syntaxes. By no means does an add-on module need to
# include routines for all of the callbacks - quite the contrary!
# 
# The example module is an actual working module. If you link it into your server,
# enable the "example-hooks-handler" handler for a location, and then browse to
# that location, you will see a display of some of the tracing the example module
# did as the various callbacks were made.
# 
#LoadModule example_hooks_module modules/mod_example_hooks.so
#
#------------------------------------------------------------------------------
# 
#LoadModule example_ipc_module modules/mod_example_ipc.so
#
#------------------------------------------------------------------------------
# 
# expires_module controls the setting of the Expires HTTP header and the max-age
# directive of the Cache-Control HTTP header in server responses. The expiration
# date can set to be relative to either the time the source file was last
# modified, or to the time of the client access.
# 
# These HTTP headers are an instruction to the client about the document's
# validity and persistence. If cached, the document may be fetched from the cache
# rather than from the source until this time has passed. After that, the cache
# copy is considered "expired" and invalid, and a new copy must be obtained from
# the source.
# 
# To modify Cache-Control directives other than max-age (see RFC 2616 section
# 14.9), you can use the Header directive.
# 
# When the Expires header is already part of the response generated by the server,
# for example when generated by a CGI script or proxied from an origin server,
# this module does not change or add an Expires or Cache-Control header.
# 
LoadModule expires_module modules/mod_expires.so
#
#------------------------------------------------------------------------------
# 
# mod_ext_filter presents a simple and familiar programming model for filters.
# With this module, a program which reads from stdin and writes to stdout (i.e., a
# Unix-style filter command) can be a filter for Apache. This filtering mechanism
# is much slower than using a filter which is specially written for the Apache API
# and runs inside of the Apache server process, but it does have the following
# benefits:
# 
# 1. The programming model is much simpler
# 2. Any programming/scripting language can be used, provided that it allows the
#    program to read from standard input and write to standard output
# 3. Existing programs can be used unmodified as Apache filters
# 
# Even when the performance characteristics are not suitable for production use,
# mod_ext_filter can be used as a prototype environment for filters.
# 
#LoadModule ext_filter_module modules/mod_ext_filter.so
#
#------------------------------------------------------------------------------
# 
# Caching frequently requested files that change very infrequently is a technique
# for reducing server load. mod_file_cache provides two techniques for caching
# frequently requested static files. Through configuration directives, you can
# direct mod_file_cache to either open then mmap() a file, or to pre-open a file
# and save the file's open file handle. Both techniques reduce server load when
# processing requests for these files by doing part of the work (specifically, the
# file I/O) for serving the file when the server is started rather than during
# each request.
# 
# Notice: You cannot use this for speeding up CGI programs or other files which
# are served by special content handlers. It can only be used for regular files
# which are usually served by the Apache core content handler.
# 
#LoadModule file_cache_module modules/mod_file_cache.so
#
#------------------------------------------------------------------------------
# 
# filter_module enables smart, context-sensitive configuration of output content
# filters. For example, apache can be configured to process different
# content-types through different filters, even when the content-type is not known
# in advance (e.g. in a proxy).
# 
# mod_filter works by introducing indirection into the filter chain. Instead of
# inserting filters in the chain, we insert a filter harness which in turn
# dispatches conditionally to a filter provider. Any content filter may be used as
# a provider to mod_filter; no change to existing filter modules is required
# (although it may be possible to simplify them).
# 
LoadModule filter_module modules/mod_filter.so
#
#------------------------------------------------------------------------------
# 
# headers_module provides directives to control and modify HTTP request and
# response headers. Headers can be merged, replaced or removed.
# 
LoadModule headers_module modules/mod_headers.so
#
#------------------------------------------------------------------------------
# 
# mod_heartbeat sends multicast messages to a mod_heartmonitor listener that
# advertises the servers current connection count. Usually, mod_heartmonitor will
# be running on a proxy server with mod_lbmethod_heartbeat loaded, which allows
# ProxyPass to use the "heartbeat" lbmethod inside of ProxyPass.
# 
# mod_heartbeat itself is loaded on the origin server(s) that serve requests
# through the proxy server(s).
# To use mod_heartbeat, mod_status and mod_watchdog must be either a static
# modules or, if a dynamic module, must be loaded before mod_heartbeat. 
# 
#LoadModule heartbeat_module modules/mod_heartbeat.so
#
#------------------------------------------------------------------------------
# 
# mod_heartmonitor listens for server status messages generated by mod_heartbeat
# enabled origin servers and makes their status available to
# mod_lbmethod_heartbeat. This allows ProxyPass to use the "heartbeat" lbmethod
# inside of ProxyPass.
# 
# This module uses the services of mod_slotmem_shm when available instead of
# flat-file storage. No configuration is required to use mod_slotmem_shm.
# To use mod_heartmonitor, mod_status and mod_watchdog must be either a static
# modules or, if a dynamic module, it must be loaded before mod_heartmonitor. 
# 
#LoadModule heartmonitor_module modules/mod_heartmonitor.so
#
#------------------------------------------------------------------------------
# 
# This module provides HTTP/2 (RFC 7540) support for the Apache HTTP Server.
# 
# This module relies on libnghttp2 to provide the core http/2 engine.
# 
# You must enable HTTP/2 via Protocols in order to use the functionality described
# in this document. The HTTP/2 protocol does not require the use of encryption so
# two schemes are available: h2 (HTTP/2 over TLS) and h2c (HTTP/2 over TCP).
# 
LoadModule http2_module modules/mod_http2.so
#
#------------------------------------------------------------------------------
# 
# ident_module queries an RFC 1413 compatible daemon on a remote host to look up
# the owner of a connection.
#
LoadModule ident_module modules/mod_ident.so
#
#------------------------------------------------------------------------------
# 
# imagemap_module processes .map files, thereby replacing the functionality of the
# imagemap CGI program. Any directory or document type configured to use the
# handler imap-file (using either AddHandler or SetHandler) will be processed by
# this module.
# 
#LoadModule imagemap_module modules/mod_imagemap.so
#
#------------------------------------------------------------------------------
# 
# include_module provides a filter which will process files before they are sent
# to the client. The processing is controlled by specially formatted SGML
# comments, referred to as elements. These elements allow conditional text, the
# inclusion of other files or programs, as well as the setting and printing of
# environment variables.
# 
LoadModule include_module modules/mod_include.so
#
#------------------------------------------------------------------------------
# 
# To configure mod_info, add the following to your httpd.conf file.
# 
# <Location "/server-info">
#     SetHandler server-info
# </Location>
# 
# You may wish to use mod_authz_host inside the <Location> directive to limit
# access to your server configuration information:
# 
# <Location "/server-info">
#     SetHandler server-info
#     Require host example.com
# </Location>
# 
# Once configured, the server information is obtained by accessing
# http://your.host.example.com/server-info
# 
LoadModule info_module modules/mod_info.so
#
#------------------------------------------------------------------------------
# 
# isapi_module implements the Internet Server extension API. It allows Internet
# Server extensions (e.g. ISAPI .dll modules) to be served by Apache for Windows,
# subject to the noted restrictions.
# 
# ISAPI extension modules (.dll files) are written by third parties. The Apache
# Group does not author these modules, so we provide no support for them. Please
# contact the ISAPI's author directly if you are experiencing problems running
# their ISAPI extension. 
# 
#LoadModule isapi_module modules/mod_isapi.so
#
#------------------------------------------------------------------------------
# 
# lbmethod_bybusyness_module does not provide any configuration directives of its
# own. It requires the services of mod_proxy_balancer, and provides the bybusyness
# load balancing method.
# 
#LoadModule lbmethod_bybusyness_module modules/mod_lbmethod_bybusyness.so
#
#------------------------------------------------------------------------------
# 
# lbmethod_byrequests_module does not provide any configuration directives of its
# own. It requires the services of mod_proxy_balancer, and provides the byrequests
# load balancing method.
# 
#LoadModule lbmethod_byrequests_module modules/mod_lbmethod_byrequests.so
#
#------------------------------------------------------------------------------
# 
# lbmethod_bytraffic_module does not provide any configuration directives of its
# own. It requires the services of mod_proxy_balancer, and provides the bytraffic
# load balancing method.
# 
#LoadModule lbmethod_bytraffic_module modules/mod_lbmethod_bytraffic.so
#
#------------------------------------------------------------------------------
# 
# lbmethod=heartbeat uses the services of mod_heartmonitor to balance between
# origin servers that are providing heartbeat info via the mod_heartbeat module.
# 
# This modules load balancing algorithm favors servers with more ready (idle)
# capacity over time, but does not select the server with the most ready capacity
# every time. Servers that have 0 active clients are penalized, with the
# assumption that they are not fully initialized.
# 
#LoadModule lbmethod_heartbeat_module modules/mod_lbmethod_heartbeat.so
#
#------------------------------------------------------------------------------
# 
# ldap_module was created to improve the performance of websites relying on
# backend connections to LDAP servers. In addition to the functions provided by
# the standard LDAP libraries, this module adds an LDAP connection pool and an
# LDAP shared memory cache.
# 
#LoadModule ldap_module modules/mod_ldap.so
#
#------------------------------------------------------------------------------
# 
# log_config_module provides for flexible logging of client requests. Logs are
# written in a customizable format, and may be written directly to a file, or to
# an external program. Conditional logging is provided so that individual requests
# may be included or excluded from the logs based on characteristics of the
# request.
# 
# Three directives are provided by this module: TransferLog to create a log file,
# LogFormat to set a custom format, and CustomLog to define a log file and format
# in one step. The TransferLog and CustomLog directives can be used multiple times
# in each server to cause each request to be logged to multiple files.
# 
LoadModule log_config_module modules/mod_log_config.so
#
#------------------------------------------------------------------------------
# 
LoadModule log_debug_module modules/mod_log_debug.so
#
#------------------------------------------------------------------------------
# 
# log_forensic_module provides for forensic logging of client requests. Logging is
# done before and after processing a request, so the forensic log contains two log
# lines for each request. The forensic logger is very strict, which means:
# 
# 1. The format is fixed. You cannot modify the logging format at runtime.
# 2. If it cannot write its data, the child process exits immediately and may
#    dump core (depending on your CoreDumpDirectory configuration).
# 
# The check_forensic script, which can be found in the distribution's support
# directory, may be helpful in evaluating the forensic log output.
# 
#LoadModule log_forensic_module modules/mod_log_forensic.so
#
#------------------------------------------------------------------------------
# 
# logio_module provides the logging of input and output number of bytes
# received/sent per request. The numbers reflect the actual bytes as received on
# the network, which then takes into account the headers and bodies of requests
# and responses. The counting is done before SSL/TLS on input and after SSL/TLS on
# output, so the numbers will correctly reflect any changes made by encryption.
# 
# When KeepAlive connections are used with SSL, the overhead of the SSL handshake
# is reflected in the byte count of the first request on the connection. When
# per-directory SSL renegotiation occurs, the bytes are associated with the
# request that triggered the renegotiation.
#
# This module requires mod_log_config.
# 
LoadModule logio_module modules/mod_logio.so
#
#------------------------------------------------------------------------------
# 
# lua_module allows the server to be extended with scripts written in the Lua
# programming language. The extension points (hooks) available with mod_lua
# include many of the hooks available to natively compiled Apache HTTP Server
# modules, such as mapping requests to files, generating dynamic responses, access
# control, authentication, and authorization
# 
#LoadModule lua_module modules/mod_lua.so
#
#------------------------------------------------------------------------------
# 
# Provides macros within Apache httpd runtime configuration files, to ease the
# process of creating numerous similar configuration blocks. When the server
# starts up, the macros are expanded using the provided parameters, and the result
# is processed as along with the rest of the configuration file.
# 
# Macros are defined using <Macro> blocks, which contain the portion of your
# configuration that needs to be repeated, complete with variables for those parts
# that will need to be substituted.
# 
#LoadModule macro_module modules/mod_macro.so
#
#------------------------------------------------------------------------------
# 
# mime_module  is used to assign content metadata to the content selected for an
# HTTP response by mapping patterns in the URI or filenames to the metadata
# values. For example, the filename extensions of content files often define the
# content's Internet media type, language, character set, and content-encoding.
# This information is sent in HTTP messages containing that content and used in
# content negotiation when selecting alternatives, such that the user's
# preferences are respected when choosing one of several possible contents to
# serve. See mod_negotiation for more information about content negotiation.
# 
LoadModule mime_module modules/mod_mime.so
#
#------------------------------------------------------------------------------
# 
# mime_magic_module determines the MIME type of files in the same way the Unix
# file(1) command works: it looks at the first few bytes of the file. It is
# intended as a "second line of defense" for cases that mod_mime can't resolve.
# 
# This module is active only if the magic file is specified by the MimeMagicFile
# directive.
# 
#LoadModule mime_magic_module modules/mod_mime_magic.so
#
#------------------------------------------------------------------------------
# 
LoadModule mpm_event_module modules/mod_mpm_event.so
#
#------------------------------------------------------------------------------
# 
#LoadModule mpm_prefork_module modules/mod_mpm_prefork.so
#
#------------------------------------------------------------------------------
# 
#LoadModule mpm_worker_module modules/mod_mpm_worker.so
#
#------------------------------------------------------------------------------
# 
# Content negotiation, or more accurately content selection, is the selection of
# the document that best matches the clients capabilities, from one of several
# available documents. There are two implementations of this.
# 
# 1. A type map (a file with the handler type-map) which explicitly lists the
#    files containing the variants.
# 2. A Multiviews search (enabled by the Multiviews Options), where the server
#    does an implicit filename pattern match, and choose from amongst the results.
# 
LoadModule negotiation_module modules/mod_negotiation.so
#
#------------------------------------------------------------------------------
# 
#LoadModule optional_fn_export_module modules/mod_optional_fn_export.so
#
#------------------------------------------------------------------------------
# 
#LoadModule optional_fn_import_module modules/mod_optional_fn_import.so
#
#------------------------------------------------------------------------------
# 
#LoadModule optional_hook_export_module modules/mod_optional_hook_export.so
#
#------------------------------------------------------------------------------
# 
#LoadModule optional_hook_import_module modules/mod_optional_hook_import.so
#
#------------------------------------------------------------------------------
# 
# Do not enable proxying with ProxyRequests until you have secured your server.
# Open proxy servers are dangerous both to your network and to the Internet at
# large.
# 
# mod_proxy and related modules implement a proxy/gateway for Apache HTTP Server,
# supporting a number of popular protocols as well as several different load
# balancing algorithms. Third-party modules can add support for additional
# protocols and load balancing algorithms.
# 
# A set of modules must be loaded into the server to provide the necessary
# features. These modules can be included statically at build time or dynamically
# via the LoadModule directive). The set must include:
# 
# 1. mod_proxy, which provides basic proxy capabilities
# 2. mod_proxy_balancer and one or more balancer modules if load balancing is
#    required. (See mod_proxy_balancer for more information.)
# 3. one or more proxy scheme, or protocol, modules.
# 
#LoadModule proxy_module modules/mod_proxy.so
#
#------------------------------------------------------------------------------
# 
# proxy_ajp_module requires the service of mod_proxy. It provides support for the
# Apache JServ Protocol version 1.3 (hereafter AJP13).
# 
# Thus, in order to get the ability of handling AJP13 protocol, mod_proxy and
# mod_proxy_ajp have to be present in the server.
# 
#LoadModule proxy_ajp_module modules/mod_proxy_ajp.so
#
#------------------------------------------------------------------------------
# 
# proxy_balancer_module requires the service of mod_proxy and it provides load
# balancing for all the supported protocols.
# 
#LoadModule proxy_balancer_module modules/mod_proxy_balancer.so
#
#------------------------------------------------------------------------------
# 
# proxy_connect_module requires the service of mod_proxy. It provides support for
# the CONNECT HTTP method. This method is mainly used to tunnel SSL requests
# through proxy servers.
# 
# Thus, in order to get the ability of handling CONNECT requests, mod_proxy and
# mod_proxy_connect have to be present in the server.
# 
# CONNECT is also used when the server needs to send an HTTPS request through a
# forward proxy. In this case the server acts as a CONNECT client. This
# functionality is part of mod_proxy and mod_proxy_connect is not needed in this
# case.
# 
#LoadModule proxy_connect_module modules/mod_proxy_connect.so
#
#------------------------------------------------------------------------------
# 
# proxy_express_module creates dynamically configured mass reverse proxies, by
# mapping the Host: header of the HTTP request to a server name and backend URL
# stored in a DBM file. This allows for easy use of a huge number of reverse
# proxies with no configuration changes. It is much less feature-full than
# mod_proxy_balancer, which also provides dynamic growth, but is intended to
# handle much, much larger numbers of backends. It is ideally suited as a
# front-end HTTP switch.
# 
# This module requires the service of mod_proxy.
# 
#LoadModule proxy_express_module modules/mod_proxy_express.so
#
#------------------------------------------------------------------------------
# 
# proxy_fcgi_module requires the service of mod_proxy. It provides support for the
# FastCGI protocol.
# 
# Thus, in order to get the ability of handling the FastCGI protocol, mod_proxy
# and mod_proxy_fcgi have to be present in the server.
# 
# Unlike mod_fcgid and mod_fastcgi, mod_proxy_fcgi has no provision for starting
# the application process; fcgistarter is provided (on some platforms) for that
# purpose. Alternatively, external launching or process management may be
# available in the FastCGI application framework in use.
# 
#LoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so
#
#------------------------------------------------------------------------------
# 
# proxy_fdpass_module requires the service of mod_proxy. It provides support for
# the passing the socket of the client to another process.
# 
# mod_proxy_fdpass uses the ability of AF_UNIX domain sockets to pass an open file
# descriptor to allow another process to finish handling a request.
# 
# The module has a proxy_fdpass_flusher provider interface, which allows another
# module to optionally send the response headers, or even the start of the
# response body. The default flush provider disables keep-alive, and sends the
# response headers, letting the external process just send a response body.
# 
# In order to use another provider, you have to set the flusher parameter in the
# ProxyPass directive.
# 
# At this time the only data passed to the external process is the client socket.
# To receive a client socket, call recvfrom with an allocated struct cmsghdr.
# Future versions of this module may include more data after the client socket,
# but this is not implemented at this time. 
# 
#LoadModule proxy_fdpass_module modules/mod_proxy_fdpass.so
#
#------------------------------------------------------------------------------
# 
# proxy_ftp_module requires the service of mod_proxy. It provides support for the
# proxying FTP sites. Note that FTP support is currently limited to the GET
# method.
# 
# Thus, in order to get the ability of handling FTP proxy requests, mod_proxy and
# mod_proxy_ftp have to be present in the server.
# 
#LoadModule proxy_ftp_module modules/mod_proxy_ftp.so
#
#------------------------------------------------------------------------------
# 
# proxy_html_module provides an output filter to rewrite HTML links in a proxy
# situation, to ensure that links work for users outside the proxy. It serves the
# same purpose as Apache's ProxyPassReverse directive does for HTTP headers, and
# is an essential component of a reverse proxy.
# 
#LoadModule proxy_html_module modules/mod_proxy_html.so
#
#------------------------------------------------------------------------------
# 
# proxy_http_module requires the service of mod_proxy. It provides the features
# used for proxying HTTP and HTTPS requests. mod_proxy_http supports HTTP/0.9,
# HTTP/1.0 and HTTP/1.1. It does not provide any caching abilities. If you want to
# set up a caching proxy, you might want to use the additional service of the
# mod_cache module.
# 
# Thus, in order to get the ability of handling HTTP proxy requests, mod_proxy and
# mod_proxy_http have to be present in the server.
# 
#LoadModule proxy_http_module modules/mod_proxy_http.so
#
#------------------------------------------------------------------------------
# 
# proxy_scgi_module requires the service of mod_proxy. It provides support for the
# SCGI protocol, version 1.
# 
# Thus, in order to get the ability of handling the SCGI protocol, mod_proxy and
# mod_proxy_scgi have to be present in the server.
# 
#LoadModule proxy_scgi_module modules/mod_proxy_scgi.so
#
#------------------------------------------------------------------------------
# 
# proxy_wstunnel_module requires the service of mod_proxy. It provides support for
# the tunnelling of web socket connections to a backend websockets server. The
# connection is automatically upgraded to a websocket connection.
# 
#LoadModule proxy_wstunnel_module modules/mod_proxy_wstunnel.so
#
#------------------------------------------------------------------------------
# 
# Provides a filter named RATE_LIMIT to limit client bandwidth. The connection
# speed to be simulated is specified, in KiB/s, using the environment variable
# rate-limit.
# 
#LoadModule ratelimit_module modules/mod_ratelimit.so
#
#------------------------------------------------------------------------------
# 
# reflector_module allows request bodies to be reflected back to the client, in
# the process passing the request through the output filter stack. A suitably
# configured chain of filters can be used to transform the request into a
# response. This module can be used to turn an output filter into an HTTP service.
# 
#LoadModule reflector_module modules/mod_reflector.so
#
#------------------------------------------------------------------------------
# 
# remoteip_module is used to treat the useragent which initiated the request as
# the originating useragent as identified by httpd for the purposes of
# authorization and logging, even where that useragent is behind a load balancer,
# front end server, or proxy server.
# 
# The module overrides the client IP address for the connection with the useragent
# IP address reported in the request header configured with the RemoteIPHeader
# directive.
# 
# Once replaced as instructed, this overridden useragent IP address is then used
# for the mod_authz_host Require ip feature, is reported by mod_status, and is
# recorded by mod_log_config %a and core %a format strings. The underlying client
# IP of the connection is available in the %{c}a format string.
#
# It is critical to only enable this behavior from intermediate hosts (proxies,
# etc) which are trusted by this server, since it is trivial for the remote
# useragent to impersonate another useragent.
# 
#LoadModule remoteip_module modules/mod_remoteip.so
#
#------------------------------------------------------------------------------
# 
# Set timeout and minimum data rate for receiving requests.
#
LoadModule reqtimeout_module modules/mod_reqtimeout.so
#
#------------------------------------------------------------------------------
# 
# Filters to handle and make available HTTP request bodies.
#
LoadModule request_module modules/mod_request.so
#
#------------------------------------------------------------------------------
# 
# The mod_rewrite module uses a rule-based rewriting engine, based on a PCRE
# regular-expression parser, to rewrite requested URLs on the fly. By default,
# mod_rewrite maps a URL to a filesystem path. However, it can also be used to
# redirect one URL to another URL, or to invoke an internal proxy fetch.
# 
# mod_rewrite provides a flexible and powerful way to manipulate URLs using an
# unlimited number of rules. Each rule can have an unlimited number of attached
# rule conditions, to allow you to rewrite URL based on server variables,
# environment variables, HTTP headers, or time stamps.
# 
# mod_rewrite operates on the full URL path, including the path-info section. A
# rewrite rule can be invoked in httpd.conf or in .htaccess. The path generated by
# a rewrite rule can include a query string, or can lead to internal
# sub-processing, external request redirection, or internal proxy throughput.
# 
LoadModule rewrite_module modules/mod_rewrite.so
#
#------------------------------------------------------------------------------
# 
# mod_sed is an in-process content filter. The mod_sed filter implements the sed
# editing commands implemented by the Solaris 10 sed program as described in the
# manual page. However, unlike sed, mod_sed doesn't take data from standard input.
# Instead, the filter acts on the entity data sent between client and server.
# mod_sed can be used as an input or output filter. mod_sed is a content filter,
# which means that it cannot be used to modify client or server http headers.
# 
# The mod_sed output filter accepts a chunk of data, executes the sed scripts on
# the data, and generates the output which is passed to the next filter in the
# chain.
# 
# The mod_sed input filter reads the data from the next filter in the chain,
# executes the sed scripts, and returns the generated data to the caller filter in
# the filter chain.
# 
# Both the input and output filters only process the data if newline characters
# are seen in the content. At the end of the data, the rest of the data is treated
# as the last line.
# 
#LoadModule sed_module modules/mod_sed.so
#
#------------------------------------------------------------------------------
# 
# The session modules make use of HTTP cookies, and as such can fall victim to
# Cross Site Scripting attacks, or expose potentially private information to
# clients. Please ensure that the relevant risks have been taken into account
# before enabling the session functionality on your server.
# 
# This module provides support for a server wide per user session interface.
# Sessions can be used for keeping track of whether a user has been logged in, or
# for other per user information that should be kept available across requests.
# 
# Sessions may be stored on the server, or may be stored on the browser. Sessions
# may also be optionally encrypted for added security. These features are divided
# into several modules in addition to mod_session; mod_session_crypto,
# mod_session_cookie and mod_session_dbd. Depending on the server requirements,
# load the appropriate modules into the server (either statically at compile time
# or dynamically via the LoadModule directive).
# 
# Sessions may be manipulated from other modules that depend on the session, or
# the session may be read from and written to using environment variables and HTTP
# headers, as appropriate.
# 
LoadModule session_module modules/mod_session.so
#
#------------------------------------------------------------------------------
# 
# The session modules make use of HTTP cookies, and as such can fall victim to
# Cross Site Scripting attacks, or expose potentially private information to
# clients. Please ensure that the relevant risks have been taken into account
# before enabling the session functionality on your server.
# 
# This submodule of mod_session provides support for the storage of user sessions
# on the remote browser within HTTP cookies.
# 
# Using cookies to store a session removes the need for the server or a group of
# servers to store the session locally, or collaborate to share a session, and can
# be useful for high traffic environments where a server based session might be
# too resource intensive.
# 
# If session privacy is required, the mod_session_crypto module can be used to
# encrypt the contents of the session before writing the session to the client.
# 
LoadModule session_cookie_module modules/mod_session_cookie.so
#
#------------------------------------------------------------------------------
# 
# The session modules make use of HTTP cookies, and as such can fall victim to
# Cross Site Scripting attacks, or expose potentially private information to
# clients. Please ensure that the relevant risks have been taken into account
# before enabling the session functionality on your server.
# 
# This submodule of mod_session provides support for the encryption of user
# sessions before being written to a local database, or written to a remote
# browser via an HTTP cookie.
# 
# This can help provide privacy to user sessions where the contents of the session
# should be kept private from the user, or where protection is needed against the
# effects of cross site scripting attacks.
# 
LoadModule session_crypto_module modules/mod_session_crypto.so
#
#------------------------------------------------------------------------------
# 
# The session modules make use of HTTP cookies, and as such can fall victim to
# Cross Site Scripting attacks, or expose potentially private information to
# clients. Please ensure that the relevant risks have been taken into account
# before enabling the session functionality on your server.
# 
# This submodule of mod_session provides support for the storage of user sessions
# within a SQL database using the mod_dbd module.
# 
# Sessions can either be anonymous, where the session is keyed by a unique UUID
# string stored on the browser in a cookie, or per user, where the session is
# keyed against the userid of the logged in user.
# 
# SQL based sessions are hidden from the browser, and so offer a measure of
# privacy without the need for encryption.
# 
# Different webservers within a server farm may choose to share a database, and so
# share sessions with one another.
# 
LoadModule session_dbd_module modules/mod_session_dbd.so
#
#------------------------------------------------------------------------------
# 
# The mod_setenvif module allows you to set internal environment variables
# according to whether different aspects of the request match regular expressions
# you specify. These environment variables can be used by other parts of the
# server to make decisions about actions to be taken, as well as becoming
# available to CGI scripts and SSI pages.
# 
# The directives are considered in the order they appear in the configuration
# files. So more complex sequences can be used, such as this example, which sets
# netscape if the browser is mozilla but not MSIE.
# 
LoadModule setenvif_module modules/mod_setenvif.so
#
#------------------------------------------------------------------------------
# 
# mod_slotmem_plain is a memory provider which provides for creation and access to
# a plain memory segment in which the datasets are organized in "slots."
# 
# If the memory needs to be shared between threads and processes, a better
# provider would be mod_slotmem_shm.
# 
#LoadModule slotmem_plain_module modules/mod_slotmem_plain.so
#
#------------------------------------------------------------------------------
# 
# mod_slotmem_shm is a memory provider which provides for creation and access to a
# shared memory segment in which the datasets are organized in "slots."
# 
# All shared memory is cleared and cleaned with each restart, whether graceful or
# not. The data itself is stored and restored within a file noted by the name
# parameter in the create and attach calls. If not specified with an absolute
# path, the file will be created relative to the path specified by the
# DefaultRuntimeDir directive. 
# 
LoadModule slotmem_shm_module modules/mod_slotmem_shm.so
#
#------------------------------------------------------------------------------
# 
# mod_socache_dbm is a shared object cache provider which provides for creation
# and access to a cache backed by a DBM database. 
# 
#LoadModule socache_dbm_module modules/mod_socache_dbm.so
#
#------------------------------------------------------------------------------
# 
# mod_socache_memcache is a shared object cache provider which provides for
# creation and access to a cache backed by the memcached high-performance,
# distributed memory object caching system.
# 
# This shared object cache provider's "create" method requires a comma separated
# list of memcached host/port specifications. If using this provider via another
# modules configuration (such as SSLSessionCache), provide the list of servers as
# the optional "arg" parameter.
# 
LoadModule socache_memcache_module modules/mod_socache_memcache.so
#
#------------------------------------------------------------------------------
# 
# mod_socache_shmcb is a shared object cache provider which provides for creation
# and access to a cache backed by a high-performance cyclic buffer inside a shared
# memory segment.
# 
LoadModule socache_shmcb_module modules/mod_socache_shmcb.so
#
#------------------------------------------------------------------------------
# 
# Requests to documents sometimes cannot be served by the core apache server
# because the request was misspelled or miscapitalized. This module addresses this
# problem by trying to find a matching document, even after all other modules gave
# up. It does its work by comparing each document name in the requested directory
# against the requested document name without regard to case, and allowing up to
# one misspelling (character insertion / omission / transposition or wrong
# character). A list is built with all document names which were matched using
# this strategy.
# 
#LoadModule speling_module modules/mod_speling.so
#
#------------------------------------------------------------------------------
# 
# This module provides SSL v3 and TLS v1.x support for the Apache HTTP Server. SSL
# v2 is no longer supported.
# 
# This module relies on OpenSSL to provide the cryptography engine.
# 
LoadModule ssl_module modules/mod_ssl.so
#
#------------------------------------------------------------------------------
# 
# The Status module allows a server administrator to find out how well their
# server is performing. A HTML page is presented that gives the current server
# statistics in an easily readable form. If required this page can be made to
# automatically refresh (given a compatible browser). Another page gives a simple
# machine-readable list of the current server state.
# 
LoadModule status_module modules/mod_status.so
#
#------------------------------------------------------------------------------
# 
# mod_substitute provides a mechanism to perform both regular expression and fixed
# string substitutions on response bodies.
# 
#LoadModule substitute_module modules/mod_substitute.so
#
#------------------------------------------------------------------------------
# 
# suexec_module in combination with the suexec support program allows CGI scripts
# to run as a specified user and Group.
# 
#LoadModule suexec_module modules/mod_suexec.so
#
#------------------------------------------------------------------------------
# 
# unique_id_module provides a magic token for each request which is guaranteed to
# be unique across "all" requests under very specific conditions. The unique
# identifier is even unique across multiple machines in a properly configured
# cluster of machines. The environment variable UNIQUE_ID is set to the identifier
# for each request.
# 
#LoadModule unique_id_module modules/mod_unique_id.so
#
#------------------------------------------------------------------------------
# 
# Basic (required) security for Unix-family platforms.
#
LoadModule unixd_module modules/mod_unixd.so
#
#------------------------------------------------------------------------------
# 
# userdir_module allows user-specific directories to be accessed using the
# http://example.com/~user/ syntax.
# 
LoadModule userdir_module modules/mod_userdir.so
#
#------------------------------------------------------------------------------
# 
# Provides tracking of a user through your website via browser cookies.
# 
# mod_usertrack sets a cookie which can be logged via mod_log_config configurable
# logging formats.
# 
#LoadModule usertrack_module modules/mod_usertrack.so
#
#------------------------------------------------------------------------------
# 
# version_module is designed for the use in test suites and large networks which
# have to deal with different httpd versions and different configurations. It
# provides a new container -- <IfVersion>, which allows a flexible version
# checking including numeric comparisons and regular expressions.
# 
LoadModule version_module modules/mod_version.so
#
#------------------------------------------------------------------------------
# 
# vhost_alias_module creates dynamically configured virtual hosts, by allowing the
# IP address and/or the Host: header of the HTTP request to be used as part of the
# pathname to determine what files to serve. This allows for easy use of a huge
# number of virtual hosts with similar configurations.
# 
LoadModule vhost_alias_module modules/mod_vhost_alias.so
#
#------------------------------------------------------------------------------
# 
# mod_watchdog defines programmatic hooks for other modules to periodically run
# tasks. These modules can register handlers for mod_watchdog hooks. Currently,
# the following modules in the Apache distribution use this functionality:
# 
#     mod_heartbeat
#     mod_heartmonitor
# 
# To allow a module to use mod_watchdog functionality, mod_watchdog itself must be
# statically linked to the server core or, if a dynamic module, be loaded before
# the calling module. 
# 
#LoadModule watchdog_module modules/mod_watchdog.so
#
#------------------------------------------------------------------------------
# 
# xml2enc_module provides enhanced internationalisation support for markup-aware
# filter modules such as mod_proxy_html. It can automatically detect the encoding
# of input data and ensure they are correctly processed by the libxml2 parser,
# including converting to Unicode (UTF-8) where necessary. It can also convert
# data to an encoding of choice after markup processing, and will ensure the
# correct charset value is set in the HTTP Content-Type header.
# 
#LoadModule xml2enc_module modules/mod_xml2enc.so
#
#------------------------------------------------------------------------------
# 

<IfModule unixd_module>
#
# If you wish httpd to run as a different user or group, you must run
# httpd as root initially and it will switch.  
#
# User/Group: The name (or #number) of the user/group to run httpd as.
# It is usually good practice to create a dedicated user and group for
# running httpd, as with most system services.
#
User apache
Group apache

</IfModule>

# 'Main' server configuration
#
# The directives in this section set up the values used by the 'main'
# server, which responds to any requests that aren't handled by a
# <VirtualHost> definition.  These values also provide defaults for
# any <VirtualHost> containers you may define later in the file.
#
# All of these directives may appear inside <VirtualHost> containers,
# in which case these default settings will be overridden for the
# virtual host being defined.
#

#
# ServerAdmin: Your address, where problems with the server should be
# e-mailed.  This address appears on some server-generated pages, such
# as error documents.  e.g. admin@your-domain.com
#
ServerAdmin webmaster@example.com

#
# ServerName gives the name and port that the server uses to identify itself.
# This can often be determined automatically, but we recommend you specify
# it explicitly to prevent problems during startup.
#
# If your host doesn't have a registered DNS name, enter its IP address here.
#
ServerName www.example.com:80

#
# Deny access to the entirety of your server's filesystem. You must
# explicitly permit access to web content directories in other 
# <Directory> blocks below.
#
<Directory />
    AllowOverride none
    Require all denied
</Directory>

#
# Note that from this point forward you must specifically allow
# particular features to be enabled - so if something's not working as
# you might expect, make sure that you have specifically enabled it
# below.
#

#
# DocumentRoot: The directory out of which you will serve your
# documents. By default, all requests are taken from this directory, but
# symbolic links and aliases may be used to point to other locations.
#
DocumentRoot "/srv/httpd/htdocs"
<Directory "/srv/httpd/htdocs">
    #
    # Possible values for the Options directive are "None", "All",
    # or any combination of:
    #   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews
    #
    # Note that "MultiViews" must be named *explicitly* --- "Options All"
    # doesn't give it to you.
    #
    # The Options directive is both complicated and important.  Please see
    # http://httpd.apache.org/docs/2.4/mod/core.html#options
    # for more information.
    #
    Options Indexes FollowSymLinks

    #
    # AllowOverride controls what directives may be placed in .htaccess files.
    # It can be "All", "None", or any combination of the keywords:
    #   AllowOverride FileInfo AuthConfig Limit
    #
    AllowOverride None

    #
    # Controls who can get stuff from this server.
    #
    Require all granted
</Directory>

<Directory "/srv/httpd/user_name_here/public_html">                             
    Options Indexes SymLinksifOwnerMatch                             
    AllowOverride None                                              
    Require all granted                                                 
</Directory>                                                                

#
# DirectoryIndex: sets the file that Apache will serve if a directory
# is requested.
#
<IfModule dir_module>
    DirectoryIndex index.html
</IfModule>

#
# The following lines prevent .htaccess and .htpasswd files from being 
# viewed by Web clients. 
#
<Files ".ht*">
    Require all denied
</Files>

#
# ErrorLog: The location of the error log file.
# If you do not specify an ErrorLog directive within a <VirtualHost>
# container, error messages relating to that virtual host will be
# logged here.  If you *do* define an error logfile for a <VirtualHost>
# container, that host's errors will be logged there and not here.
#
ErrorLog "/var/log/httpd/error.log"

#
# LogLevel: Control the number of messages logged to the error_log.
# Possible values include: debug, info, notice, warn, error, crit,
# alert, emerg.
#
LogLevel warn

<IfModule log_config_module>
    #
    # The following directives define some format nicknames for use with
    # a CustomLog directive (see below).
    #
    LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
    LogFormat "%h %l %u %t \"%r\" %>s %b" common

    #
    # The location and format of the access logfile (Common Logfile Format).
    # If you do not define any access logfiles within a <VirtualHost>
    # container, they will be logged here.  Contrariwise, if you *do*
    # define per-<VirtualHost> access logfiles, transactions will be
    # logged therein and *not* in this file.
    #
    <IfModule !logio_module>
      CustomLog "/var/log/httpd/access.log" combined
    </IfModule>

    <IfModule logio_module>
      # You need to enable mod_logio.c to use %I and %O
      LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" %I %O" combinedio
      CustomLog "/var/log/httpd/access.log" combinedio
    </IfModule>

</IfModule>

<IfModule alias_module>
    #
    # Redirect: Allows you to tell clients about documents that used to 
    # exist in your server's namespace, but do not anymore. The client 
    # will make a new request for the document at its new location.
    # Example:
    # Redirect permanent /foo http://www.example.com/bar

    #
    # Alias: Maps web paths into filesystem paths and is used to
    # access content that does not live under the DocumentRoot.
    # Example:
    # Alias /webpath /full/filesystem/path
    #
    # If you include a trailing / on /webpath then the server will
    # require it to be present in the URL.  You will also likely
    # need to provide a <Directory> section to allow access to
    # the filesystem path.

    #
    # ScriptAlias: This controls which directories contain server scripts. 
    # ScriptAliases are essentially the same as Aliases, except that
    # documents in the target directory are treated as applications and
    # run by the server when requested rather than as documents sent to the
    # client.  The same rules about trailing "/" apply to ScriptAlias
    # directives as to Alias.
    #
    ScriptAlias /cgi-bin/ "/srv/httpd/cgi-bin/"

</IfModule>

<IfModule cgid_module>
    #
    # ScriptSock: On threaded servers, designate the path to the UNIX
    # socket used to communicate with the CGI daemon of mod_cgid.
    #
    #Scriptsock cgisock
</IfModule>

#
# "/usr/local/var/www/cgi-bin" should be changed to whatever your ScriptAliased
# CGI directory exists, if you have that configured.
#
<Directory "/srv/httpd/cgi-bin">
    AllowOverride None
    Options None
    Require all granted
</Directory>

<IfModule mime_module>
    #
    # TypesConfig points to the file containing the list of mappings from
    # filename extension to MIME-type.
    #
    TypesConfig /usr/local/etc/httpd/mime.types

    #
    # AddType allows you to add to or override the MIME configuration
    # file specified in TypesConfig for specific file types.
    #
    #AddType application/x-gzip .tgz
    #
    # AddEncoding allows you to have certain browsers uncompress
    # information on the fly. Note: Not all browsers support this.
    #
    #AddEncoding x-compress .Z
    #AddEncoding x-gzip .gz .tgz
    #
    # If the AddEncoding directives above are commented-out, then you
    # probably should define those extensions to indicate media types:
    #
    AddType application/x-compress .Z
    AddType application/x-gzip .gz .tgz

    #
    # AddHandler allows you to map certain file extensions to "handlers":
    # actions unrelated to filetype. These can be either built into the server
    # or added with the Action directive (see below)
    #
    # To use CGI scripts outside of ScriptAliased directories:
    # (You will also need to add "ExecCGI" to the "Options" directive.)
    #
    #AddHandler cgi-script .cgi

    # For type maps (negotiated resources):
    #AddHandler type-map var

    #
    # Filters allow you to process content before it is sent to the client.
    #
    # To parse .shtml files for server-side includes (SSI):
    # (You will also need to add "Includes" to the "Options" directive.)
    #
    #AddType text/html .shtml
    #AddOutputFilter INCLUDES .shtml
</IfModule>

#
# The mod_mime_magic module allows the server to use various hints from the
# contents of the file itself to determine its type.  The MIMEMagicFile
# directive tells the module where the hint definitions are located.
#
#MIMEMagicFile /usr/local/etc/httpd/magic

#
# Customizable error responses come in three flavors:
# 1) plain text 2) local redirects 3) external redirects
#
# Some examples:
#ErrorDocument 500 "The server made a boo boo."
#ErrorDocument 404 /missing.html
#ErrorDocument 404 "/cgi-bin/missing_handler.pl"
#ErrorDocument 402 http://www.example.com/subscription_info.html
#

#
# MaxRanges: Maximum number of Ranges in a request before
# returning the entire resource, or one of the special
# values 'default', 'none' or 'unlimited'.
# Default setting is to accept 200 Ranges.
#MaxRanges unlimited

#
# EnableMMAP and EnableSendfile: On systems that support it, 
# memory-mapping or the sendfile syscall may be used to deliver
# files.  This usually improves server performance, but must
# be turned off when serving from networked-mounted 
# filesystems or if support for these functions is otherwise
# broken on your system.
# Defaults: EnableMMAP On, EnableSendfile Off
#
#EnableMMAP off
#EnableSendfile on

# Supplemental configuration
#
# The configuration files in the /usr/local/etc/httpd/extra/ directory can be 
# included to add extra features or to modify the default configuration of 
# the server, or you may simply copy their contents here and change as 
# necessary.

# Server-pool management (MPM specific)
Include /usr/local/etc/httpd/conf.d/httpd-mpm.conf

# Multi-language error messages
#Include /usr/local/etc/httpd/extra/httpd-multilang-errordoc.conf

# Fancy directory listings
Include /usr/local/etc/httpd/conf.d/httpd-autoindex.conf

# Language settings
#Include /usr/local/etc/httpd/extra/httpd-languages.conf

# User home directories
Include /usr/local/etc/httpd/conf.d/httpd-userdir.conf

# Real-time info on requests and configuration
Include /usr/local/etc/httpd/conf.d/httpd-info.conf

# Virtual hosts
Include /usr/local/etc/httpd/conf.d/httpd-vhosts.conf

# Local access to the Apache HTTP Server Manual
Include /usr/local/etc/httpd/conf.d/httpd-manual.conf

# Distributed authoring and versioning (WebDAV)
#Include /usr/local/etc/httpd/extra/httpd-dav.conf

# Various default settings
#Include /usr/local/etc/httpd/extra/httpd-default.conf

# PHP 7
Include /usr/local/etc/httpd/conf.d/mod_php7.conf

# Configure mod_proxy_html to understand HTML4/XHTML1
<IfModule proxy_html_module>
    Include /usr/local/etc/httpd/conf.d/proxy-html.conf
</IfModule>

# Secure (SSL/TLS) connections
Include /usr/local/etc/httpd/conf.d/httpd-ssl.conf
#
# Note: The following must must be present to support
#       starting without SSL on platforms with no /dev/random equivalent
#       but a statically compiled-in mod_ssl.
#
<IfModule ssl_module>
  SSLRandomSeed startup builtin
  SSLRandomSeed connect builtin
</IfModule>
#
# uncomment out the below to deal with user agents that deliberately
# violate open standards by misusing DNT (DNT *must* be a specific
# end-user choice)
#
#<IfModule setenvif_module>
#BrowserMatch "MSIE 10.0;" bad_DNT
#</IfModule>
#<IfModule headers_module>
#RequestHeader unset DNT env=bad_DNT
#</IfModule>

